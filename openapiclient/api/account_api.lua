--[[
  API2Cart OpenAPI

  API2Cart

  The version of the OpenAPI document: 1.1
  Contact: contact@api2cart.com
  Generated by: https://openapi-generator.tech
]]

--package openapiclient

local http_request = require "http.request"
local http_util = require "http.util"
local dkjson = require "dkjson"
local basexx = require "basexx"

-- model import
local openapiclient_account_cart_add_200_response = require "openapiclient.model.account_cart_add_200_response"
local openapiclient_account_cart_list_200_response = require "openapiclient.model.account_cart_list_200_response"
local openapiclient_account_config_update_200_response = require "openapiclient.model.account_config_update_200_response"
local openapiclient_account_failed_webhooks_200_response = require "openapiclient.model.account_failed_webhooks_200_response"
local openapiclient_account_supported_platforms_200_response = require "openapiclient.model.account_supported_platforms_200_response"
local openapiclient_account_cart_add = require "openapiclient.model.account_cart_add"

local account_api = {}
local account_api_mt = {
	__name = "account_api";
	__index = account_api;
}

local function new_account_api(authority, basePath, schemes)
	local schemes_map = {}
	for _,v in ipairs(schemes) do
		schemes_map[v] = v
	end
	local default_scheme = schemes_map.https or schemes_map.http
	local host, port = http_util.split_authority(authority, default_scheme)
	return setmetatable({
		host = host;
		port = port;
		basePath = basePath or "https://api.api2cart.local.com/v1.1";
		schemes = schemes_map;
		default_scheme = default_scheme;
		http_username = nil;
		http_password = nil;
		api_key = {};
		access_token = nil;
	}, account_api_mt)
end

function account_api:account_cart_add(account_cart_add)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/account.cart.add.json",
			self.basePath);
	})

	-- set HTTP verb
	req.headers:upsert(":method", "POST")
	-- TODO: create a function to select proper accept
	--local var_content_type = { "application/json" }
	req.headers:upsert("accept", "application/json")

	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json" }
	req.headers:upsert("content-type", "application/json")

	req:set_body(dkjson.encode(account_cart_add))

	-- api key in headers 'x-api-key'
	if self.api_key['x-api-key'] then
		req.headers:upsert("ApiKeyAuth", self.api_key['x-api-key'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return openapiclient_account_cart_add_200_response.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function account_api:account_cart_list(store_url, store_key, request_from_date, request_to_date, params, exclude)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/account.cart.list.json?store_url=%s&store_key=%s&request_from_date=%s&request_to_date=%s&params=%s&exclude=%s",
			self.basePath, http_util.encodeURIComponent(store_url), http_util.encodeURIComponent(store_key), http_util.encodeURIComponent(request_from_date), http_util.encodeURIComponent(request_to_date), http_util.encodeURIComponent(params), http_util.encodeURIComponent(exclude));
	})

	-- set HTTP verb
	req.headers:upsert(":method", "GET")
	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json" }
	req.headers:upsert("content-type", "application/json")

	-- api key in headers 'x-api-key'
	if self.api_key['x-api-key'] then
		req.headers:upsert("ApiKeyAuth", self.api_key['x-api-key'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return openapiclient_account_cart_list_200_response.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function account_api:account_config_update(replace_parameters, new_store_url, new_store_key, bridge_url, store_root, db_tables_prefix, user_agent, Var3dcart_private_key, Var3dcart_access_token, Var3dcartapi_api_key, amazon_sp_client_id, amazon_sp_client_secret, amazon_sp_refresh_token, amazon_sp_aws_region, amazon_sp_api_environment, amazon_seller_id, aspdotnetstorefront_api_user, aspdotnetstorefront_api_pass, bigcommerceapi_admin_account, bigcommerceapi_api_path, bigcommerceapi_api_key, bigcommerceapi_client_id, bigcommerceapi_access_token, bigcommerceapi_context, bol_api_key, bol_api_secret, bol_retailer_id, demandware_client_id, demandware_api_password, demandware_user_name, demandware_user_password, ebay_client_id, ebay_client_secret, ebay_runame, ebay_access_token, ebay_refresh_token, ebay_environment, ebay_site_id, ecwid_acess_token, ecwid_store_id, lazada_app_id, lazada_app_secret, lazada_refresh_token, lazada_region, etsy_keystring, etsy_shared_secret, etsy_access_token, etsy_token_secret, etsy_client_id, etsy_refresh_token, facebook_app_id, facebook_app_secret, facebook_access_token, facebook_business_id, neto_api_key, neto_api_username, shopline_access_token, shopline_app_key, shopline_app_secret, shopline_shared_secret, shopify_access_token, shopify_api_key, shopify_api_password, shopify_shared_secret, shopee_partner_id, shopee_partner_key, shopee_shop_id, shopee_refresh_token, shopee_region, shopee_environment, shoplazza_access_token, shoplazza_shared_secret, miva_access_token, miva_signature, shopware_access_key, shopware_api_key, shopware_api_secret, bigcartel_user_name, bigcartel_password, bricklink_consumer_key, bricklink_consumer_secret, bricklink_token, bricklink_token_secret, volusion_login, volusion_password, walmart_client_id, walmart_client_secret, walmart_environment, walmart_channel_type, walmart_region, square_client_id, square_client_secret, square_refresh_token, squarespace_api_key, squarespace_client_id, squarespace_client_secret, squarespace_access_token, squarespace_refresh_token, hybris_client_id, hybris_client_secret, hybris_username, hybris_password, hybris_websites, lightspeed_api_key, lightspeed_api_secret, commercehq_api_key, commercehq_api_password, wc_consumer_key, wc_consumer_secret, magento_consumer_key, magento_consumer_secret, magento_access_token, magento_token_secret, prestashop_webservice_key, wix_app_id, wix_app_secret_key, wix_instance_id, wix_refresh_token, mercado_libre_app_id, mercado_libre_app_secret_key, mercado_libre_refresh_token, zid_client_id, zid_client_secret, zid_access_token, zid_authorization, zid_refresh_token, flipkart_client_id, flipkart_client_secret, allegro_client_id, allegro_client_secret, allegro_access_token, allegro_refresh_token, allegro_environment, zoho_client_id, zoho_client_secret, zoho_refresh_token, zoho_region, tiendanube_user_id, tiendanube_access_token, tiendanube_client_secret, otto_client_id, otto_client_secret, otto_app_id, otto_refresh_token, otto_environment, otto_access_token, tiktokshop_app_key, tiktokshop_app_secret, tiktokshop_refresh_token, tiktokshop_access_token, salla_client_id, salla_client_secret, salla_refresh_token, salla_access_token, temu_app_key, temu_app_secret, temu_access_token, temu_region)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/account.config.update.json?replace_parameters=%s&new_store_url=%s&new_store_key=%s&bridge_url=%s&store_root=%s&db_tables_prefix=%s&user_agent=%s&3dcart_private_key=%s&3dcart_access_token=%s&3dcartapi_api_key=%s&amazon_sp_client_id=%s&amazon_sp_client_secret=%s&amazon_sp_refresh_token=%s&amazon_sp_aws_region=%s&amazon_sp_api_environment=%s&amazon_seller_id=%s&aspdotnetstorefront_api_user=%s&aspdotnetstorefront_api_pass=%s&bigcommerceapi_admin_account=%s&bigcommerceapi_api_path=%s&bigcommerceapi_api_key=%s&bigcommerceapi_client_id=%s&bigcommerceapi_access_token=%s&bigcommerceapi_context=%s&bol_api_key=%s&bol_api_secret=%s&bol_retailer_id=%s&demandware_client_id=%s&demandware_api_password=%s&demandware_user_name=%s&demandware_user_password=%s&ebay_client_id=%s&ebay_client_secret=%s&ebay_runame=%s&ebay_access_token=%s&ebay_refresh_token=%s&ebay_environment=%s&ebay_site_id=%s&ecwid_acess_token=%s&ecwid_store_id=%s&lazada_app_id=%s&lazada_app_secret=%s&lazada_refresh_token=%s&lazada_region=%s&etsy_keystring=%s&etsy_shared_secret=%s&etsy_access_token=%s&etsy_token_secret=%s&etsy_client_id=%s&etsy_refresh_token=%s&facebook_app_id=%s&facebook_app_secret=%s&facebook_access_token=%s&facebook_business_id=%s&neto_api_key=%s&neto_api_username=%s&shopline_access_token=%s&shopline_app_key=%s&shopline_app_secret=%s&shopline_shared_secret=%s&shopify_access_token=%s&shopify_api_key=%s&shopify_api_password=%s&shopify_shared_secret=%s&shopee_partner_id=%s&shopee_partner_key=%s&shopee_shop_id=%s&shopee_refresh_token=%s&shopee_region=%s&shopee_environment=%s&shoplazza_access_token=%s&shoplazza_shared_secret=%s&miva_access_token=%s&miva_signature=%s&shopware_access_key=%s&shopware_api_key=%s&shopware_api_secret=%s&bigcartel_user_name=%s&bigcartel_password=%s&bricklink_consumer_key=%s&bricklink_consumer_secret=%s&bricklink_token=%s&bricklink_token_secret=%s&volusion_login=%s&volusion_password=%s&walmart_client_id=%s&walmart_client_secret=%s&walmart_environment=%s&walmart_channel_type=%s&walmart_region=%s&square_client_id=%s&square_client_secret=%s&square_refresh_token=%s&squarespace_api_key=%s&squarespace_client_id=%s&squarespace_client_secret=%s&squarespace_access_token=%s&squarespace_refresh_token=%s&hybris_client_id=%s&hybris_client_secret=%s&hybris_username=%s&hybris_password=%s&hybris_websites=%s&lightspeed_api_key=%s&lightspeed_api_secret=%s&commercehq_api_key=%s&commercehq_api_password=%s&wc_consumer_key=%s&wc_consumer_secret=%s&magento_consumer_key=%s&magento_consumer_secret=%s&magento_access_token=%s&magento_token_secret=%s&prestashop_webservice_key=%s&wix_app_id=%s&wix_app_secret_key=%s&wix_instance_id=%s&wix_refresh_token=%s&mercado_libre_app_id=%s&mercado_libre_app_secret_key=%s&mercado_libre_refresh_token=%s&zid_client_id=%s&zid_client_secret=%s&zid_access_token=%s&zid_authorization=%s&zid_refresh_token=%s&flipkart_client_id=%s&flipkart_client_secret=%s&allegro_client_id=%s&allegro_client_secret=%s&allegro_access_token=%s&allegro_refresh_token=%s&allegro_environment=%s&zoho_client_id=%s&zoho_client_secret=%s&zoho_refresh_token=%s&zoho_region=%s&tiendanube_user_id=%s&tiendanube_access_token=%s&tiendanube_client_secret=%s&otto_client_id=%s&otto_client_secret=%s&otto_app_id=%s&otto_refresh_token=%s&otto_environment=%s&otto_access_token=%s&tiktokshop_app_key=%s&tiktokshop_app_secret=%s&tiktokshop_refresh_token=%s&tiktokshop_access_token=%s&salla_client_id=%s&salla_client_secret=%s&salla_refresh_token=%s&salla_access_token=%s&temu_app_key=%s&temu_app_secret=%s&temu_access_token=%s&temu_region=%s",
			self.basePath, http_util.encodeURIComponent(replace_parameters), http_util.encodeURIComponent(new_store_url), http_util.encodeURIComponent(new_store_key), http_util.encodeURIComponent(bridge_url), http_util.encodeURIComponent(store_root), http_util.encodeURIComponent(db_tables_prefix), http_util.encodeURIComponent(user_agent), http_util.encodeURIComponent(Var3dcart_private_key), http_util.encodeURIComponent(Var3dcart_access_token), http_util.encodeURIComponent(Var3dcartapi_api_key), http_util.encodeURIComponent(amazon_sp_client_id), http_util.encodeURIComponent(amazon_sp_client_secret), http_util.encodeURIComponent(amazon_sp_refresh_token), http_util.encodeURIComponent(amazon_sp_aws_region), http_util.encodeURIComponent(amazon_sp_api_environment), http_util.encodeURIComponent(amazon_seller_id), http_util.encodeURIComponent(aspdotnetstorefront_api_user), http_util.encodeURIComponent(aspdotnetstorefront_api_pass), http_util.encodeURIComponent(bigcommerceapi_admin_account), http_util.encodeURIComponent(bigcommerceapi_api_path), http_util.encodeURIComponent(bigcommerceapi_api_key), http_util.encodeURIComponent(bigcommerceapi_client_id), http_util.encodeURIComponent(bigcommerceapi_access_token), http_util.encodeURIComponent(bigcommerceapi_context), http_util.encodeURIComponent(bol_api_key), http_util.encodeURIComponent(bol_api_secret), http_util.encodeURIComponent(bol_retailer_id), http_util.encodeURIComponent(demandware_client_id), http_util.encodeURIComponent(demandware_api_password), http_util.encodeURIComponent(demandware_user_name), http_util.encodeURIComponent(demandware_user_password), http_util.encodeURIComponent(ebay_client_id), http_util.encodeURIComponent(ebay_client_secret), http_util.encodeURIComponent(ebay_runame), http_util.encodeURIComponent(ebay_access_token), http_util.encodeURIComponent(ebay_refresh_token), http_util.encodeURIComponent(ebay_environment), http_util.encodeURIComponent(ebay_site_id), http_util.encodeURIComponent(ecwid_acess_token), http_util.encodeURIComponent(ecwid_store_id), http_util.encodeURIComponent(lazada_app_id), http_util.encodeURIComponent(lazada_app_secret), http_util.encodeURIComponent(lazada_refresh_token), http_util.encodeURIComponent(lazada_region), http_util.encodeURIComponent(etsy_keystring), http_util.encodeURIComponent(etsy_shared_secret), http_util.encodeURIComponent(etsy_access_token), http_util.encodeURIComponent(etsy_token_secret), http_util.encodeURIComponent(etsy_client_id), http_util.encodeURIComponent(etsy_refresh_token), http_util.encodeURIComponent(facebook_app_id), http_util.encodeURIComponent(facebook_app_secret), http_util.encodeURIComponent(facebook_access_token), http_util.encodeURIComponent(facebook_business_id), http_util.encodeURIComponent(neto_api_key), http_util.encodeURIComponent(neto_api_username), http_util.encodeURIComponent(shopline_access_token), http_util.encodeURIComponent(shopline_app_key), http_util.encodeURIComponent(shopline_app_secret), http_util.encodeURIComponent(shopline_shared_secret), http_util.encodeURIComponent(shopify_access_token), http_util.encodeURIComponent(shopify_api_key), http_util.encodeURIComponent(shopify_api_password), http_util.encodeURIComponent(shopify_shared_secret), http_util.encodeURIComponent(shopee_partner_id), http_util.encodeURIComponent(shopee_partner_key), http_util.encodeURIComponent(shopee_shop_id), http_util.encodeURIComponent(shopee_refresh_token), http_util.encodeURIComponent(shopee_region), http_util.encodeURIComponent(shopee_environment), http_util.encodeURIComponent(shoplazza_access_token), http_util.encodeURIComponent(shoplazza_shared_secret), http_util.encodeURIComponent(miva_access_token), http_util.encodeURIComponent(miva_signature), http_util.encodeURIComponent(shopware_access_key), http_util.encodeURIComponent(shopware_api_key), http_util.encodeURIComponent(shopware_api_secret), http_util.encodeURIComponent(bigcartel_user_name), http_util.encodeURIComponent(bigcartel_password), http_util.encodeURIComponent(bricklink_consumer_key), http_util.encodeURIComponent(bricklink_consumer_secret), http_util.encodeURIComponent(bricklink_token), http_util.encodeURIComponent(bricklink_token_secret), http_util.encodeURIComponent(volusion_login), http_util.encodeURIComponent(volusion_password), http_util.encodeURIComponent(walmart_client_id), http_util.encodeURIComponent(walmart_client_secret), http_util.encodeURIComponent(walmart_environment), http_util.encodeURIComponent(walmart_channel_type), http_util.encodeURIComponent(walmart_region), http_util.encodeURIComponent(square_client_id), http_util.encodeURIComponent(square_client_secret), http_util.encodeURIComponent(square_refresh_token), http_util.encodeURIComponent(squarespace_api_key), http_util.encodeURIComponent(squarespace_client_id), http_util.encodeURIComponent(squarespace_client_secret), http_util.encodeURIComponent(squarespace_access_token), http_util.encodeURIComponent(squarespace_refresh_token), http_util.encodeURIComponent(hybris_client_id), http_util.encodeURIComponent(hybris_client_secret), http_util.encodeURIComponent(hybris_username), http_util.encodeURIComponent(hybris_password), http_util.encodeURIComponent(hybris_websites), http_util.encodeURIComponent(lightspeed_api_key), http_util.encodeURIComponent(lightspeed_api_secret), http_util.encodeURIComponent(commercehq_api_key), http_util.encodeURIComponent(commercehq_api_password), http_util.encodeURIComponent(wc_consumer_key), http_util.encodeURIComponent(wc_consumer_secret), http_util.encodeURIComponent(magento_consumer_key), http_util.encodeURIComponent(magento_consumer_secret), http_util.encodeURIComponent(magento_access_token), http_util.encodeURIComponent(magento_token_secret), http_util.encodeURIComponent(prestashop_webservice_key), http_util.encodeURIComponent(wix_app_id), http_util.encodeURIComponent(wix_app_secret_key), http_util.encodeURIComponent(wix_instance_id), http_util.encodeURIComponent(wix_refresh_token), http_util.encodeURIComponent(mercado_libre_app_id), http_util.encodeURIComponent(mercado_libre_app_secret_key), http_util.encodeURIComponent(mercado_libre_refresh_token), http_util.encodeURIComponent(zid_client_id), http_util.encodeURIComponent(zid_client_secret), http_util.encodeURIComponent(zid_access_token), http_util.encodeURIComponent(zid_authorization), http_util.encodeURIComponent(zid_refresh_token), http_util.encodeURIComponent(flipkart_client_id), http_util.encodeURIComponent(flipkart_client_secret), http_util.encodeURIComponent(allegro_client_id), http_util.encodeURIComponent(allegro_client_secret), http_util.encodeURIComponent(allegro_access_token), http_util.encodeURIComponent(allegro_refresh_token), http_util.encodeURIComponent(allegro_environment), http_util.encodeURIComponent(zoho_client_id), http_util.encodeURIComponent(zoho_client_secret), http_util.encodeURIComponent(zoho_refresh_token), http_util.encodeURIComponent(zoho_region), http_util.encodeURIComponent(tiendanube_user_id), http_util.encodeURIComponent(tiendanube_access_token), http_util.encodeURIComponent(tiendanube_client_secret), http_util.encodeURIComponent(otto_client_id), http_util.encodeURIComponent(otto_client_secret), http_util.encodeURIComponent(otto_app_id), http_util.encodeURIComponent(otto_refresh_token), http_util.encodeURIComponent(otto_environment), http_util.encodeURIComponent(otto_access_token), http_util.encodeURIComponent(tiktokshop_app_key), http_util.encodeURIComponent(tiktokshop_app_secret), http_util.encodeURIComponent(tiktokshop_refresh_token), http_util.encodeURIComponent(tiktokshop_access_token), http_util.encodeURIComponent(salla_client_id), http_util.encodeURIComponent(salla_client_secret), http_util.encodeURIComponent(salla_refresh_token), http_util.encodeURIComponent(salla_access_token), http_util.encodeURIComponent(temu_app_key), http_util.encodeURIComponent(temu_app_secret), http_util.encodeURIComponent(temu_access_token), http_util.encodeURIComponent(temu_region));
	})

	-- set HTTP verb
	req.headers:upsert(":method", "PUT")
	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json" }
	req.headers:upsert("content-type", "application/json")

	-- api key in headers 'x-store-key'
	if self.api_key['x-store-key'] then
		req.headers:upsert("StoreKeyAuth", self.api_key['x-store-key'])
	end
	-- api key in headers 'x-api-key'
	if self.api_key['x-api-key'] then
		req.headers:upsert("ApiKeyAuth", self.api_key['x-api-key'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return openapiclient_account_config_update_200_response.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function account_api:account_failed_webhooks(start, count, ids)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/account.failed_webhooks.json?start=%s&count=%s&ids=%s",
			self.basePath, http_util.encodeURIComponent(start), http_util.encodeURIComponent(count), http_util.encodeURIComponent(ids));
	})

	-- set HTTP verb
	req.headers:upsert(":method", "GET")
	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json" }
	req.headers:upsert("content-type", "application/json")

	-- api key in headers 'x-api-key'
	if self.api_key['x-api-key'] then
		req.headers:upsert("ApiKeyAuth", self.api_key['x-api-key'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return openapiclient_account_failed_webhooks_200_response.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function account_api:account_supported_platforms()
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/account.supported_platforms.json",
			self.basePath);
	})

	-- set HTTP verb
	req.headers:upsert(":method", "GET")
	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json" }
	req.headers:upsert("content-type", "application/json")

	-- api key in headers 'x-api-key'
	if self.api_key['x-api-key'] then
		req.headers:upsert("ApiKeyAuth", self.api_key['x-api-key'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return openapiclient_account_supported_platforms_200_response.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

return {
	new = new_account_api;
}
