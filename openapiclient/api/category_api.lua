--[[
  API2Cart OpenAPI

  API2Cart

  The version of the OpenAPI document: 1.1
  Contact: contact@api2cart.com
  Generated by: https://openapi-generator.tech
]]

--package openapiclient

local http_request = require "http.request"
local http_util = require "http.util"
local dkjson = require "dkjson"
local basexx = require "basexx"

-- model import
local openapiclient_account_config_update_200_response = require "openapiclient.model.account_config_update_200_response"
local openapiclient_attribute_delete_200_response = require "openapiclient.model.attribute_delete_200_response"
local openapiclient_cart_config_update_200_response = require "openapiclient.model.cart_config_update_200_response"
local openapiclient_category_add_batch_200_response = require "openapiclient.model.category_add_batch_200_response"
local openapiclient_category_add_200_response = require "openapiclient.model.category_add_200_response"
local openapiclient_category_count_200_response = require "openapiclient.model.category_count_200_response"
local openapiclient_category_delete_200_response = require "openapiclient.model.category_delete_200_response"
local openapiclient_category_find_200_response = require "openapiclient.model.category_find_200_response"
local openapiclient_category_image_add_200_response = require "openapiclient.model.category_image_add_200_response"
local openapiclient_category_info_200_response = require "openapiclient.model.category_info_200_response"
local openapiclient_model_response_category_list = require "openapiclient.model.model_response_category_list"
local openapiclient_category_add_batch = require "openapiclient.model.category_add_batch"

local category_api = {}
local category_api_mt = {
	__name = "category_api";
	__index = category_api;
}

local function new_category_api(authority, basePath, schemes)
	local schemes_map = {}
	for _,v in ipairs(schemes) do
		schemes_map[v] = v
	end
	local default_scheme = schemes_map.https or schemes_map.http
	local host, port = http_util.split_authority(authority, default_scheme)
	return setmetatable({
		host = host;
		port = port;
		basePath = basePath or "https://api.api2cart.com/v1.1";
		schemes = schemes_map;
		default_scheme = default_scheme;
		http_username = nil;
		http_password = nil;
		api_key = {};
		access_token = nil;
	}, category_api_mt)
end

function category_api:category_add(name, parent_id, stores_ids, store_id, lang_id, avail, sort_order, created_time, modified_time, description, short_description, meta_title, meta_description, meta_keywords, seo_url)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/category.add.json?name=%s&parent_id=%s&stores_ids=%s&store_id=%s&lang_id=%s&avail=%s&sort_order=%s&created_time=%s&modified_time=%s&description=%s&short_description=%s&meta_title=%s&meta_description=%s&meta_keywords=%s&seo_url=%s",
			self.basePath, http_util.encodeURIComponent(name), http_util.encodeURIComponent(parent_id), http_util.encodeURIComponent(stores_ids), http_util.encodeURIComponent(store_id), http_util.encodeURIComponent(lang_id), http_util.encodeURIComponent(avail), http_util.encodeURIComponent(sort_order), http_util.encodeURIComponent(created_time), http_util.encodeURIComponent(modified_time), http_util.encodeURIComponent(description), http_util.encodeURIComponent(short_description), http_util.encodeURIComponent(meta_title), http_util.encodeURIComponent(meta_description), http_util.encodeURIComponent(meta_keywords), http_util.encodeURIComponent(seo_url));
	})

	-- set HTTP verb
	req.headers:upsert(":method", "POST")
	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json" }
	req.headers:upsert("content-type", "application/json")

	-- api key in headers 'x-store-key'
	if self.api_key['x-store-key'] then
		req.headers:upsert("StoreKeyAuth", self.api_key['x-store-key'])
	end
	-- api key in headers 'x-api-key'
	if self.api_key['x-api-key'] then
		req.headers:upsert("ApiKeyAuth", self.api_key['x-api-key'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return openapiclient_category_add_200_response.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function category_api:category_add_batch(category_add_batch)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/category.add.batch.json",
			self.basePath);
	})

	-- set HTTP verb
	req.headers:upsert(":method", "POST")
	-- TODO: create a function to select proper accept
	--local var_content_type = { "application/json" }
	req.headers:upsert("accept", "application/json")

	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json" }
	req.headers:upsert("content-type", "application/json")

	req:set_body(dkjson.encode(category_add_batch))

	-- api key in headers 'x-store-key'
	if self.api_key['x-store-key'] then
		req.headers:upsert("StoreKeyAuth", self.api_key['x-store-key'])
	end
	-- api key in headers 'x-api-key'
	if self.api_key['x-api-key'] then
		req.headers:upsert("ApiKeyAuth", self.api_key['x-api-key'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return openapiclient_category_add_batch_200_response.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function category_api:category_assign(product_id, category_id, store_id)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/category.assign.json?product_id=%s&category_id=%s&store_id=%s",
			self.basePath, http_util.encodeURIComponent(product_id), http_util.encodeURIComponent(category_id), http_util.encodeURIComponent(store_id));
	})

	-- set HTTP verb
	req.headers:upsert(":method", "POST")
	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json" }
	req.headers:upsert("content-type", "application/json")

	-- api key in headers 'x-store-key'
	if self.api_key['x-store-key'] then
		req.headers:upsert("StoreKeyAuth", self.api_key['x-store-key'])
	end
	-- api key in headers 'x-api-key'
	if self.api_key['x-api-key'] then
		req.headers:upsert("ApiKeyAuth", self.api_key['x-api-key'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return openapiclient_cart_config_update_200_response.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function category_api:category_count(parent_id, store_id, lang_id, created_from, created_to, modified_from, modified_to, avail, product_type, find_value, find_where, report_request_id, disable_report_cache)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/category.count.json?parent_id=%s&store_id=%s&lang_id=%s&created_from=%s&created_to=%s&modified_from=%s&modified_to=%s&avail=%s&product_type=%s&find_value=%s&find_where=%s&report_request_id=%s&disable_report_cache=%s",
			self.basePath, http_util.encodeURIComponent(parent_id), http_util.encodeURIComponent(store_id), http_util.encodeURIComponent(lang_id), http_util.encodeURIComponent(created_from), http_util.encodeURIComponent(created_to), http_util.encodeURIComponent(modified_from), http_util.encodeURIComponent(modified_to), http_util.encodeURIComponent(avail), http_util.encodeURIComponent(product_type), http_util.encodeURIComponent(find_value), http_util.encodeURIComponent(find_where), http_util.encodeURIComponent(report_request_id), http_util.encodeURIComponent(disable_report_cache));
	})

	-- set HTTP verb
	req.headers:upsert(":method", "GET")
	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json" }
	req.headers:upsert("content-type", "application/json")

	-- api key in headers 'x-store-key'
	if self.api_key['x-store-key'] then
		req.headers:upsert("StoreKeyAuth", self.api_key['x-store-key'])
	end
	-- api key in headers 'x-api-key'
	if self.api_key['x-api-key'] then
		req.headers:upsert("ApiKeyAuth", self.api_key['x-api-key'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return openapiclient_category_count_200_response.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function category_api:category_delete(id, store_id)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/category.delete.json?id=%s&store_id=%s",
			self.basePath, http_util.encodeURIComponent(id), http_util.encodeURIComponent(store_id));
	})

	-- set HTTP verb
	req.headers:upsert(":method", "DELETE")
	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json" }
	req.headers:upsert("content-type", "application/json")

	-- api key in headers 'x-store-key'
	if self.api_key['x-store-key'] then
		req.headers:upsert("StoreKeyAuth", self.api_key['x-store-key'])
	end
	-- api key in headers 'x-api-key'
	if self.api_key['x-api-key'] then
		req.headers:upsert("ApiKeyAuth", self.api_key['x-api-key'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return openapiclient_category_delete_200_response.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function category_api:category_find(find_value, find_where, find_params, store_id, lang_id)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/category.find.json?find_value=%s&find_where=%s&find_params=%s&store_id=%s&lang_id=%s",
			self.basePath, http_util.encodeURIComponent(find_value), http_util.encodeURIComponent(find_where), http_util.encodeURIComponent(find_params), http_util.encodeURIComponent(store_id), http_util.encodeURIComponent(lang_id));
	})

	-- set HTTP verb
	req.headers:upsert(":method", "GET")
	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json" }
	req.headers:upsert("content-type", "application/json")

	-- api key in headers 'x-store-key'
	if self.api_key['x-store-key'] then
		req.headers:upsert("StoreKeyAuth", self.api_key['x-store-key'])
	end
	-- api key in headers 'x-api-key'
	if self.api_key['x-api-key'] then
		req.headers:upsert("ApiKeyAuth", self.api_key['x-api-key'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return openapiclient_category_find_200_response.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function category_api:category_image_add(category_id, image_name, url, type, label, mime, position, store_id)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/category.image.add.json?category_id=%s&image_name=%s&url=%s&label=%s&mime=%s&type=%s&position=%s&store_id=%s",
			self.basePath, http_util.encodeURIComponent(category_id), http_util.encodeURIComponent(image_name), http_util.encodeURIComponent(url), http_util.encodeURIComponent(label), http_util.encodeURIComponent(mime), http_util.encodeURIComponent(type), http_util.encodeURIComponent(position), http_util.encodeURIComponent(store_id));
	})

	-- set HTTP verb
	req.headers:upsert(":method", "POST")
	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json" }
	req.headers:upsert("content-type", "application/json")

	-- api key in headers 'x-store-key'
	if self.api_key['x-store-key'] then
		req.headers:upsert("StoreKeyAuth", self.api_key['x-store-key'])
	end
	-- api key in headers 'x-api-key'
	if self.api_key['x-api-key'] then
		req.headers:upsert("ApiKeyAuth", self.api_key['x-api-key'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return openapiclient_category_image_add_200_response.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function category_api:category_image_delete(category_id, image_id, store_id)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/category.image.delete.json?category_id=%s&image_id=%s&store_id=%s",
			self.basePath, http_util.encodeURIComponent(category_id), http_util.encodeURIComponent(image_id), http_util.encodeURIComponent(store_id));
	})

	-- set HTTP verb
	req.headers:upsert(":method", "DELETE")
	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json" }
	req.headers:upsert("content-type", "application/json")

	-- api key in headers 'x-store-key'
	if self.api_key['x-store-key'] then
		req.headers:upsert("StoreKeyAuth", self.api_key['x-store-key'])
	end
	-- api key in headers 'x-api-key'
	if self.api_key['x-api-key'] then
		req.headers:upsert("ApiKeyAuth", self.api_key['x-api-key'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return openapiclient_attribute_delete_200_response.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function category_api:category_info(id, params, response_fields, exclude, store_id, lang_id, schema_type, report_request_id, disable_report_cache)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/category.info.json?id=%s&params=%s&response_fields=%s&exclude=%s&store_id=%s&lang_id=%s&schema_type=%s&report_request_id=%s&disable_report_cache=%s",
			self.basePath, http_util.encodeURIComponent(id), http_util.encodeURIComponent(params), http_util.encodeURIComponent(response_fields), http_util.encodeURIComponent(exclude), http_util.encodeURIComponent(store_id), http_util.encodeURIComponent(lang_id), http_util.encodeURIComponent(schema_type), http_util.encodeURIComponent(report_request_id), http_util.encodeURIComponent(disable_report_cache));
	})

	-- set HTTP verb
	req.headers:upsert(":method", "GET")
	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json" }
	req.headers:upsert("content-type", "application/json")

	-- api key in headers 'x-store-key'
	if self.api_key['x-store-key'] then
		req.headers:upsert("StoreKeyAuth", self.api_key['x-store-key'])
	end
	-- api key in headers 'x-api-key'
	if self.api_key['x-api-key'] then
		req.headers:upsert("ApiKeyAuth", self.api_key['x-api-key'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return openapiclient_category_info_200_response.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function category_api:category_list(start, count, page_cursor, parent_id, params, response_fields, exclude, store_id, lang_id, created_from, created_to, modified_from, modified_to, avail, product_type, find_value, find_where, report_request_id, disable_report_cache, disable_cache)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/category.list.json?start=%s&count=%s&page_cursor=%s&parent_id=%s&params=%s&response_fields=%s&exclude=%s&store_id=%s&lang_id=%s&created_from=%s&created_to=%s&modified_from=%s&modified_to=%s&avail=%s&product_type=%s&find_value=%s&find_where=%s&report_request_id=%s&disable_report_cache=%s&disable_cache=%s",
			self.basePath, http_util.encodeURIComponent(start), http_util.encodeURIComponent(count), http_util.encodeURIComponent(page_cursor), http_util.encodeURIComponent(parent_id), http_util.encodeURIComponent(params), http_util.encodeURIComponent(response_fields), http_util.encodeURIComponent(exclude), http_util.encodeURIComponent(store_id), http_util.encodeURIComponent(lang_id), http_util.encodeURIComponent(created_from), http_util.encodeURIComponent(created_to), http_util.encodeURIComponent(modified_from), http_util.encodeURIComponent(modified_to), http_util.encodeURIComponent(avail), http_util.encodeURIComponent(product_type), http_util.encodeURIComponent(find_value), http_util.encodeURIComponent(find_where), http_util.encodeURIComponent(report_request_id), http_util.encodeURIComponent(disable_report_cache), http_util.encodeURIComponent(disable_cache));
	})

	-- set HTTP verb
	req.headers:upsert(":method", "GET")
	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json" }
	req.headers:upsert("content-type", "application/json")

	-- api key in headers 'x-store-key'
	if self.api_key['x-store-key'] then
		req.headers:upsert("StoreKeyAuth", self.api_key['x-store-key'])
	end
	-- api key in headers 'x-api-key'
	if self.api_key['x-api-key'] then
		req.headers:upsert("ApiKeyAuth", self.api_key['x-api-key'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return openapiclient_model_response_category_list.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function category_api:category_unassign(category_id, product_id, store_id)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/category.unassign.json?category_id=%s&product_id=%s&store_id=%s",
			self.basePath, http_util.encodeURIComponent(category_id), http_util.encodeURIComponent(product_id), http_util.encodeURIComponent(store_id));
	})

	-- set HTTP verb
	req.headers:upsert(":method", "POST")
	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json" }
	req.headers:upsert("content-type", "application/json")

	-- api key in headers 'x-store-key'
	if self.api_key['x-store-key'] then
		req.headers:upsert("StoreKeyAuth", self.api_key['x-store-key'])
	end
	-- api key in headers 'x-api-key'
	if self.api_key['x-api-key'] then
		req.headers:upsert("ApiKeyAuth", self.api_key['x-api-key'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return openapiclient_cart_config_update_200_response.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function category_api:category_update(id, name, parent_id, stores_ids, avail, sort_order, modified_time, description, short_description, meta_title, meta_description, meta_keywords, seo_url, lang_id, store_id)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/category.update.json?id=%s&name=%s&parent_id=%s&stores_ids=%s&avail=%s&sort_order=%s&modified_time=%s&description=%s&short_description=%s&meta_title=%s&meta_description=%s&meta_keywords=%s&seo_url=%s&lang_id=%s&store_id=%s",
			self.basePath, http_util.encodeURIComponent(id), http_util.encodeURIComponent(name), http_util.encodeURIComponent(parent_id), http_util.encodeURIComponent(stores_ids), http_util.encodeURIComponent(avail), http_util.encodeURIComponent(sort_order), http_util.encodeURIComponent(modified_time), http_util.encodeURIComponent(description), http_util.encodeURIComponent(short_description), http_util.encodeURIComponent(meta_title), http_util.encodeURIComponent(meta_description), http_util.encodeURIComponent(meta_keywords), http_util.encodeURIComponent(seo_url), http_util.encodeURIComponent(lang_id), http_util.encodeURIComponent(store_id));
	})

	-- set HTTP verb
	req.headers:upsert(":method", "PUT")
	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json" }
	req.headers:upsert("content-type", "application/json")

	-- api key in headers 'x-store-key'
	if self.api_key['x-store-key'] then
		req.headers:upsert("StoreKeyAuth", self.api_key['x-store-key'])
	end
	-- api key in headers 'x-api-key'
	if self.api_key['x-api-key'] then
		req.headers:upsert("ApiKeyAuth", self.api_key['x-api-key'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return openapiclient_account_config_update_200_response.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

return {
	new = new_category_api;
}
